// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE")
}

model Organization {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  email        String         @unique
  name         String?
  password     String?
  quota        String?
  status       Boolean?
  mobile       String?
  address      String?
  city         String?
  state        String?
  pincode      String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  participants Participants[]
  quizes       Quiz[]
}

model user_auth {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  email    String  @unique
  password String?
}

model reset_token {
  user_id   String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  CreatedAt DateTime @default(now())
}

model Participants {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  Organization_id String
  name            String?
  email           String       @unique
  password        String?
  mobile          String?
  organization    Organization @relation(fields: [Organization_id], references: [id])
}

model Level {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  level     String      @unique
  status    Boolean?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  questions Questions[]
  Quiz      Quiz[]
}

model Module {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  module    String      @unique
  status    Boolean?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  questions Questions[]
  Quiz      Quiz[]
}

model Login {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  token         String?  @unique
  refresh_token String?  @unique
  email         String
  token_id      String
  role          String?
  createdAt     DateTime @default(now())
}

model Questions {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  question_type String?
  option_type   String?
  options       Json?
  question_time String?
  images        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        Boolean
  level_id      String?
  module_id     String?
  marks         String?
  level         Level?   @relation(fields: [level_id], references: [id])
  module        Module?  @relation(fields: [module_id], references: [id])
}

model Quiz {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  quiz_name       String        @unique
  quiz_image      String?
  description     String?
  start_date      DateTime?
  end_date        DateTime?
  buffer_time     DateTime?
  level_id        String?
  module_id       String[]
  Organization_id String?
  level           Level?        @relation(fields: [level_id], references: [id])
  module          Module?       @relation(fields: [module_id], references: [id])
  status          Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  organization    Organization? @relation(fields: [Organization_id], references: [id])
}

model Role {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  role String
  user User[]
}

model User {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  email                String                 @unique
  role_id              String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  role                 Role?                  @relation(fields: [role_id], references: [id])
  organization_profile Organization_profile[]
  participant_profile Participant_profile[]
}

model Organization_profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id   String?
  email     String   @unique
  password  String?
  name      String?
  quota     String?
  status    Boolean?
  mobile    String?
  address   String?
  city      String?
  state     String?
  pincode   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [user_id], references: [id])
  patricipant_profile  Participant_profile[]
}

model Participant_profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user_id   String?
  OrganizationProfile_id String
  name            String?
  email           String       @unique
  password        String?
  mobile          String?
    user      User?    @relation(fields: [user_id], references: [id])
  organization_profile    Organization_profile? @relation(fields: [OrganizationProfile_id], references: [id])
}
